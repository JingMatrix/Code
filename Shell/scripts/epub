#! zsh
# If provide hash from reader.obook.vip, then download that e-book, otherwise parse a given file
basedir=$(dirname $0)

function htmlparser {
	readerhtml="=['\"]\/books\/mobile\/|^<meta |<\/div><\/div><\/div>"
	readercontainer='^<div class="readercontent"><div class="readercontent-inner">'
	if grep -q $readercontainer $1; then
		sed <$1 -n -E "/$readerhtml/d;1,/<\/head>/p;/$readercontainer/,\$p" |
			sed -E "s#$readercontainer#<body><div>#;s#^</body>#</div></body>#" |
			fixhtml
	else
		echo >&2 "No epubee reader fingerprint found"
		fixhtml <$1
	fi
}

function fixhtml {
	# read from stdin and output to stdout
	# try to first load local config files
	local tidy_config=$basedir/../../Web/tidy.config
	if [[ -f $tidy_config ]]; then
		local -a args=("-config" $tidy_config)
	else
		echo "No config file $tidy_config found, using default config"
		local -a args=("--output-xhtml" "yes" "--add-meta-charset" "yes" "--add-xml-decl" "yes" "--doctype" '-//W3C//DTD" "--XHTML" "--1.1//EN' "--output-xhtml" "yes" "--clean" "yes" "--drop-proprietary-attributes" "yes" "--logical-emphasis" "yes" "--alt-text" "image" "--coerce-endtags" "yes" "--enclose-block-text" "yes" "--enclose-text" "yes" "--decorate-inferred-ul" "yes" "--indent" "yes" "--quiet" "yes")
	fi
	tidy $args |
		sed '3s#""#"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"#'
	# fix doctype
}

function parseepubee {
	# parse files in directory $1, assume opf locates in OEBPS/
	# parse opf
	local opffile=$1/OEBPS/content.opf
	if [[ -f $opffile ]]; then
		cd $1/OEBPS
		local filename="/tmp/$(grep -oP '<dc:title>\K[^<]+' $opffile).epub"
		local tmp=$(head $opffile | grep -oP 'version="\K\w\.0">')
		local epubver=$tmp[0,3]
		echo Current epub version is $epubver
		if [[ $epubver == "2.0" ]]; then
			# a common error in epubcheck
			sed -i -E 's# properties="[^"]+"##' $opffile
			# another possible error caused by toc.ncx in epub2.0
			# parse toc.ncx
			if [[ -f toc.ncx ]]; then
				sed -i '/ content="bookid"/d' $1/OEBPS/toc.ncx
			fi
		fi
		echo "Validating content.opf file"
		epubcheck --mode opf -v $epubver $opffile
		echo -n "Modify content.opf of $filename?\t"
		read -q && vim $opffile
	else
		echo >&2 "Cannot find content.opf file"
	fi
	# parse html files
	echo "\nParsing [x]html files..."
	cd ${1}-bak
	for html in OEBPS/**html; do
		htmlparser ${1}-bak/$html >$1/$html
	done
	# parse css
}

function packepub {
	cd $1
	if [[ -f $2 ]]; then
		rm $2 -f
	fi
	zip -rX $2 *
	(sigil $2 &)
}

function checkepub {
	# run epubcheck over directory $1
	# report stored as $1.json
	# human readable report stored as $1.error
	# problematical files stored as /tmp/errorfilelist
	echo "\nStart epubcheck over directory $1"
	epubcheck $1 --mode exp --save --json $1.json
	jq '.messages | .[] | .message' $1.json -r
	jq '.messages | .[] | .severity as $SEV | .message as $MSG | .locations | .[] | [$SEV, .path, .line, .column, $MSG] | @tsv' $1.json -r >$1.error
	jq '.messages | .[] | .locations | .[] | .path' $1.json -r >/tmp/errorfilelist
	local filename="/tmp/$(jq '.publication | .title' $1.json -r).epub"
	if [[ -f $1.epub ]]; then
		mv $1.epub $filename
	else
		repairepub $1
	fi
}

function repairepub {
	# repair epub directory $1 using report from checkepub
	# Edit with vim
	if [[ -f /tmp/errorfilelist ]]; then
		echo -n "Edit with vim?\t"
		# loop when edit with vim
		sort /tmp/errorfilelist | uniq | while read -q; do
			[[ -f $1.json ]] || checkepub $1
			cd $1
			local -a filelist
			while read -r file; do
				if [[ -f $file ]]; then
					filelist+=($file)
				fi
			done
			echo 'setl errorformat=%WWARNING\	%f\	%l\	%c\	%m,%EERROR\	%f\	%l\	%c\	%m' >/tmp/epub.vim
			echo "cd $1" >>/tmp/epub.vim
			echo "cf $1.error" >>/tmp/epub.vim
			echo "copen" >>/tmp/epub.vim
			tmux neww "vim -S /tmp/epub.vim $filelist"
			echo -n "\nRun epubcheck again?\t"
			rm $1.json
		done
	else
		echo "No error report at /tmp/errorfilelist found"
	fi

	# Other methods
	if [[ -f $1.error ]]; then
		echo -n "\nChange to html directory?\t"
		read -q && cd $1/OEBPS && $SHELL
		echo -n "\nPack epub directly?\t"
		if read -q; then
			local filename="/tmp/$(jq '.publication | .title' $1.json -r).epub"
			packepub $1 $filename && less $1.error
		fi
	else
		echo "No epubcheck report $1.error found"
	fi
}

function downloadepubee {
	# download epub by hash $1 from reader.obook.vip
	# download is aria2c
	# backup orginal downloaded files in /tmp/epub/$1-bak
	local rootdir=/tmp/epub/$1
	mkdir -p $rootdir/
	mkdir -p $rootdir/OEBPS
	mkdir -p $rootdir/META-INF
	cd $rootdir/
	echo -n 'application/epub+zip' >mimetype
	echo -n '<?xml version="1.0" encoding="UTF-8" ?>
<container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container">
  <rootfiles>
    <rootfile full-path="OEBPS/content.opf" media-type="application/oebps-package+xml"/>
  </rootfiles>
</container>' >META-INF/container.xml
	cd $rootdir/OEBPS
	local root=http://reader.obook.vip/books/mobile/${1:0:2}/$1
	aria2c $root/content.opf
	grep -oP 'item href="\K[^"]+' content.opf | while read -r file; do
		dir=$(dirname $file)
		[[ -d $dir ]] || mkdir -p $dir
		aria2c $root/$file -d $dir
	done
	cp $rootdir $rootdir-bak -r
	parseepubee $rootdir
}

# first try to find 32bit hash from $1
epubhash=$(grep -oP '[0-9a-f]{32}' <<<$1)
if [[ $epubhash && -z $2 ]]; then
	local rootdir=/tmp/epub/$epubhash
	if [[ -d $rootdir-bak ]]; then
		echo -n "Use cached download files, parser them again?\t"
		if read -q; then
			echo "\nStart parsing cached files"
			parseepubee $rootdir
		fi
	else
		downloadepubee $epubhash
	fi
	echo -n "\nSkip epubcheck? Directly pack epub\t"
	if read -q; then
		local opffile=$rootdir/OEBPS/content.opf
		local filename="/tmp/$(grep -oP '<dc:title>\K[^<]+' $opffile).epub"
		packepub $rootdir $filename
	else
		checkepub $rootdir
	fi
else
	if [[ -f $1 ]]; then
		# parse given file in argument
		echo parse html file $1
		htmlparser $1
	elif [[ -d $1 ]]; then
		# pack directory as epub
		[[ -z $2 ]] && 2="/tmp/$(basename $1).epub"
		packepub $1 $2
	fi
fi
